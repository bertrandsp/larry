---
description: >
  Workspace rules for the iOS-first rebuild of Larry – the AI-powered vocabulary app.
  iOS frontend built with SwiftUI and Combine. Backend uses Node.js (Express), PostgreSQL (Prisma),
  and WorkOS for Apple/Google/email auth. All vocab logic and data sync via API.
  These rules ensure architecture alignment, code quality, and platform-specific performance.
globs:
  - "**/*"
alwaysApply: true
---

## Project Context
Larry is an AI-powered vocabulary app that teaches lingo relevant to a user's career, hobbies, travels, and communities.
Users receive 1–3 personalized words per day and explore topics deeper via “Larry Chat,” an AI-powered coach.

---

## Priorities (Milestone 1)
1. iOS app shell with **SwiftUI** and 5 core screens:
   - Onboarding
   - Home (Daily Word)
   - Larry Chat
   - Wordbank (History/Favorites/Want to Master)
   - Interests (Topic Weighting)

2. Deep linking + OAuth flow using **WorkOS**:
   - `POST /auth/mobile/start`
   - `GET /auth/mobile/callback`
   - `POST /auth/consume-otc`

3. API setup with:
   - `GET /health`
   - Prisma/Postgres DB connected
   - WorkOS auth wired
   - Vocabulary routes:
     - `GET /daily`
     - `POST /actions/favorite`
     - `POST /actions/learn-again`

4. Spaced repetition logic (70% new terms, 30% review).
5. Wordbank UI & API endpoints.

---

## iOS Conventions (SwiftUI + Combine)
- Use **MVVM** architecture (by feature module).
- Use **ObservableObject** + `@Published` for state.
- Use `URLSession` or **Alamofire** for networking.
- Use `Codable` for models and API responses.
- Secure tokens using **Keychain**.
- Use **UserDefaults** for lightweight local state (e.g., streak).
- Push notifications via **APNs**.
- Deep links via **Universal Links** and SceneDelegate handlers.
- Error handling via `Result`, `do/catch`, and alert-driven UI.

---

## Backend Conventions (Node.js)
- TypeScript + strict mode
- Clean architecture (feature-based: `auth/`, `vocab/`, `topics/`, `ai/`)
- Zod for runtime validation
- Prisma ORM for DB
- JWT-based auth sessions
- Queue logic via BullMQ + Redis
- Caching allowed via Redis
- Expose APIs for:
  - auth
  - vocab delivery
  - AI explanations (SSE)
  - review/wordbank management

---

## AI, Logic, & Delivery Rules
- Vocabulary delivered using spaced repetition buckets (Leitner method)
- AI explanations use GPT-4o with domain context
- One-time-code login (OTC) after WorkOS OAuth
- Travel topics auto-boosted if trip date is within 30 days
- "Learn Again" lowers term bucket for faster review
- "Mastered" removes word from rotation
- Onboarding must enforce 100% topic weight sum

---

## UI & Styling (iOS)
- Built with **SwiftUI** – no UIKit unless absolutely needed
- Modular views and reusable components
- Dynamic Type and accessibility compliance
- Touch targets ≥ 44pt
- Color contrast meets WCAG 2.1 AA
- All tappable views have accessibility labels
- Inclusive example sentences (gender-neutral, culturally aware)

---

## Folder Structure (iOS)

Larry/
├── App.swift
├── Models/
├── Views/
│   ├── Onboarding/
│   ├── Home/
│   ├── Chat/
│   ├── Wordbank/
│   └── Interests/
├── ViewModels/
├── Services/
│   ├── APIClient.swift
│   ├── AuthService.swift
│   └── SpacedRepetition.swift
├── Utilities/
│   ├── Extensions.swift
│   └── Constants.swift
├── Resources/
│   ├── Localizations/
│   └── Fonts/

---

## Code Style & Structure (Swift)
- Use **SwiftLint** + Prettier for linting
- camelCase for variables/functions, PascalCase for types/components
- Separate concerns via Models, Views, ViewModels
- Minimal logic inside views — push to ViewModels
- Use Combine's `.map`, `.flatMap`, `.sink` for reactive pipelines
- Avoid hardcoded strings – use localization keys

---

## Extra Context for All Commands
- Use `pnpm` for managing backend monorepo
- Backend must support JWT auth with refresh tokens
- Privacy compliance:
  - Delete = hard delete all related DB records
  - Export = full JSON bundle
- All endpoints must stream AI responses using SSE when applicable
- Cache AI results on device to reduce costs (if term ID known)
- Keep `docs/PRD.md` updated with any logic changes

---

## Metrics to Track (Post-MVP)
- D1/D7 retention
- Daily open rate from push
- AI Chat usage % per user
- Word mastery completion rate
- % of users completing onboarding
- Subscription conversion rate

---

## Monetization Rules
- Free users:
  - 1 word/day
  - Limited AI chat
  - Basic Wordbank

- Plus users:
  - 3 words/day
  - Unlimited Larry Chat
  - Advanced spaced review
  - Custom topic creation
  - Travel boosts + widgets

---

## Future iOS Upgrades
- Lock screen widgets (Streak, Word of the Day)
- Siri Shortcut: “What’s my word today?”
- Spotlight indexing of Wordbank
- SwiftData support (iOS 17+)
- iCloud sync for favorites/streaks
- StoreKit for subscriptions

---