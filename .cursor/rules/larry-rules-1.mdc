---
description: >
  Workspace instructions for the Larry AI-powered vocabulary app project.
  Built with React Native (Expo) frontend and Node.js (Express) backend, using Prisma + PostgreSQL and WorkOS auth.
  Includes engineering priorities, conventions, and extra context for all commands.
globs:
  - "**/*"
alwaysApply: true
---

## Project Context
Larry is an AI-powered vocabulary app built with **React Native (Expo)** on the frontend and **Node.js (Express)** on the backend.  
The backend uses **Prisma + PostgreSQL** for persistence and **WorkOS** for authentication (Apple/Google/email).  

The app personalizes vocabulary based on the user’s profession, goals, hobbies, travel plans, and communities, delivering 1–3 relevant words per day and enabling deeper exploration via “Larry Chat,” an AI-powered topic coach.

---

## Priorities (Milestone 1)
1. Mobile app shell with **Expo Router**, theming, and 5 core screens:
   - Onboarding  
   - Home (Daily Word)  
   - Larry Chat  
   - Wordbank  
   - Interests (topic weighting UI)  

2. Deep linking + OAuth flow using **WorkOS** via API endpoints:
   - `POST /auth/mobile/start`  
   - `GET /auth/mobile/callback`  
   - `POST /auth/consume-otc`  

3. API bootstrap with:
   - Health check (`GET /health`)  
   - Prisma ORM connected to Postgres  
   - WorkOS client wired for auth  
   - Vocabulary routes: `GET /daily`, `POST /actions/favorite`, `POST /actions/learn-again`  

4. Initial spaced repetition logic for vocab delivery (70% new, 30% review).  
5. Wordbank (history, favorites, want-to-master) UI & endpoints.  

---

## Conventions
- **TypeScript** everywhere (strict mode).  
- **Clean architecture** — organize backend by feature modules (`auth`, `vocab`, `topics`, `ai`).  
- **Zod** for runtime type validation.  
- **React Query** for data fetching & caching.  
- **Zustand** for client-side state management.  
- **Absolute imports** (`@/` aliases).  
- **ESLint + Prettier** enforced for formatting & linting.  
- Minimum **44px touch targets** for accessibility.  
- All interactive elements have accessible labels and VoiceOver support.  
- Culturally aware, inclusive example sentences in content.  

---

## Extra Context for All Commands
- Use **pnpm** in a monorepo setup (`app` + `api`).  
- Backend must support JWT access/refresh tokens after WorkOS auth.  
- Frontend auth flow: start → WorkOS hosted OAuth → server callback → one-time code deep link to app → token exchange via `/auth/consume-otc`.  
- Spaced repetition uses Leitner buckets; “Learn Again” demotes the word for quicker review; “Mastered” removes it from the rotation.  
- Topic weights must total 100% before save; disabled topics are excluded from scheduling logic.  
- Privacy compliance: deleting an account removes all related DB records; data export available in JSON.  
- Keep the **PRD** in `docs/PRD.md` for reference and consistency.
- Use Git best practices, new branches for new features. commits for major steps, testing before commits, and other git/version control best practices.

---

## Git Workflow (Enhanced)
- **Feature Branching**: Create new branches for each feature: `feature/[feature-name]`
- **Development**: Commit major steps within feature branches with descriptive messages
- **Testing**: Test functionality thoroughly before merging
- **Merging**: Merge to main only after feature is complete and tested
- **Cleanup**: Delete feature branches after successful merge
- **Main Branch**: Should only contain completed, tested features
- **Branch Naming**: Use descriptive names (e.g., `feature/selection-engine`, `feature/openai-integration`)

### Example Workflow:
```bash
git checkout -b feature/new-feature
# ... develop and test
git checkout main
git merge feature/new-feature
git branch -d feature/new-feature
```
```

## React Native + Expo Best Practices
- Use functional components with hooks.
- Utilize Expo SDK features and APIs.
- Implement proper navigation with **React Navigation** + Expo Router.
- Use Expo’s asset system for images and fonts.
- Implement error handling and crash reporting.
- Use Expo’s push notification system when needed.
- Secure sensitive data with Expo Secure Store.
- Optimize for offline support.
- Follow React Native’s threading model for smooth UI performance.
- Use EAS Build & OTA updates for deployments.

---

## Folder Structure
```
assets/
src/
  components/
  screens/
  navigation/
  hooks/
  utils/
App.tsx
app.json
```

---

## Code Style & Structure
- Concise, type-safe **TypeScript** code in all files.
- Functional components + hooks over class components.
- Modular, reusable, maintainable components.
- Organize files by feature (group related components, hooks, styles).
- **camelCase** for variables/functions, **PascalCase** for components, lowercase-hyphenated for directories.
- Prefer interfaces for props/state.
- No `any` types; enable `strict` in `tsconfig.json`.
- Use `React.FC` for components with props.
- Minimize heavy computations inside render methods.
- Use `React.memo()` for static props.
- Optimize FlatList with `removeClippedSubviews`, `maxToRenderPerBatch`, `windowSize`, and `getItemLayout` when sizes are consistent.
- Avoid anonymous functions in `renderItem` or event handlers.

---

## UI & Styling
- Use consistent styling via `StyleSheet.create()` or Styled Components.
- Responsive layouts for all screen sizes/orientations.
- Optimize image loading (e.g., `react-native-fast-image`).
- Minimum 44px touch targets, accessible labels, and VoiceOver support.

---





Larry Build Plan — Unified Master Checklist

0. Workspace Plumbing
	•	Files:
	•	.env.example — include OPENAI_API_KEY, DATABASE_URL, ADMIN_SIGNING_KEY
	•	api/src/config.ts — zod validation for env vars
	•	api/src/ai/models.ts
	•	api/src/db.ts & api/src/redis.ts
	•	api/src/utils/normalize.ts & api/src/utils/backoff.ts
	•	api/src/services/openai.ts & api/src/services/extract.ts
	•	Install deps:

pnpm add -w openai zod express bullmq ioredis @prisma/client
pnpm add -w -D prisma tsx typescript


	•	Server & routes:
	•	api/src/server.ts
	•	api/src/routes/admin.ts
	•	api/src/routes/daily.ts
	•	api/src/jobs/index.ts
	•	api/src/workers/seed.worker.ts
	•	api/src/workers/discover.worker.ts
	•	api/src/workers/fetch.worker.ts
	•	api/src/workers/extract.worker.ts
	•	Add scripts to package.json
	•	Create tsconfig.json with ES2022, strict mode, etc.

⸻

1. Prisma Schema
	•	Define models from PRD ￼.
	•	Run:

pnpm prisma generate
pnpm prisma migrate dev --name init



⸻

2. OpenAI Integration
	•	Ensure services/openai.ts and services/extract.ts handle:
	•	Timeouts
	•	Retries
	•	JSON schema validation (zod)

⸻

3. Selection Engine (/daily)
	•	api/src/services/selectNextTerm.ts — selection logic (weights, spaced repetition, recency)
	•	api/src/routes/daily.ts:
	•	GET /daily
	•	POST /learn-again
	•	Test via curl and Prisma Studio.

⸻

4. Background Jobs
	•	Redis queue setup (docker run -p 6379:6379 redis:7)
	•	Workers:
	•	seed.worker.ts
	•	discover.worker.ts
	•	fetch.worker.ts
	•	extract.worker.ts
	•	Import in server.ts

⸻

5. Seeding (Seed Topic)
	•	POST /admin/seed-topic in routes/admin.ts
	•	Worker calls OpenAI to create seed vocab
	•	Upsert into terms, facts, tags

⸻

6. Ingestion Pipeline
	•	POST /admin/ingest in routes/admin.ts
	•	discover.worker.ts → find content (stub → real API calls later)
	•	fetch.worker.ts → fetch & normalize to Doc
	•	extract.worker.ts → run OpenAI extraction, upsert terms/facts
	•	Verify in Prisma Studio

⸻

7. Tagging & Graph
	•	In seed/extract workers:
	•	Add term tags, aliases, graph edges
	•	GET /terms/:id/related endpoint
	•	Optional: enable embeddings (pgvector)

⸻

8. AI Explain
	•	POST /ai/explain with SSE/NDJSON streaming
	•	Keep API key server-side
	•	Follow AI constraints in PRD ￼

⸻

9. Security, Cost & Ops
	•	Admin guard in routes/admin.ts
	•	Change ADMIN_SIGNING_KEY in .env
	•	Rate limit & cost gate:

pnpm add -w express-rate-limit


	•	api/src/middleware/costGate.ts → read last-minute token spend from Redis
	•	Token logging helper: store {jobId, model, inTokens, outTokens, ms} in job_metrics

⸻

10. Testing
	•	Unit test zod validators
	•	Integration test: seed → select → deliver
	•	Snapshot test extractFromDoc outputs
	•	Install:

pnpm add -w -D vitest ts-node @types/node


	•	"test": "vitest" in package.json

⸻

11. Provider Implementations
	•	Replace stubs in discover/fetch workers with real API logic:
	•	Wikipedia/Wiktionary REST APIs
	•	YouTube Data API + Captions
	•	Reddit API (OAuth)
	•	UrbanDictionary (check ToS)

⸻

12. Developer Ergonomics
	•	Cursor multi-edit for TODO tags
	•	One-click tasks (.cursortasks) for:
	•	Start API
	•	Seed topic
	•	Ingest topic
	•	Open Prisma Studio
	•	Run tests

⸻

Acceptance Checklist
	•	/healthz responds
	•	/admin/seed-topic creates ≥ N seed terms
	•	/admin/ingest produces Doc + INGEST terms
	•	/daily returns varying terms; learn-again works
	•	Workers retry/backoff gracefully
	•	Prisma schema migrated; no dupes
	•	Admin key required for /admin/*
	•	(Optional) embeddings wired; /terms/:id/related returns neighbors

⸻