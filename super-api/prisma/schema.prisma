// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String  @id @default(uuid())
  email                String  @unique
  subscription         String  @default("free")
  openAiFirstPreferred Boolean @default(false) // User's preferred pipeline

  // Onboarding fields
  name                String?
  username            String?
  professionCurrent   String?
  professionTarget    String?
  goal                String?
  hobbies             String[]  @default([])
  languages           String[]  @default([])
  travelLocation      String?
  travelDate          DateTime?
  preferredDifficulty String    @default("intermediate")
  enableNotifications Boolean   @default(false)
  notificationTime    String?
  dailyWordGoal       Int       @default(1)
  onboardingCompleted Boolean   @default(false)

  // New onboarding step fields
  onboardingSource String? // How user found the app
  learningLevel    String? // User's skill level
  widgetOptIn      Boolean? // Widget preference
  onboardingStep   String   @default("welcome") // Current step tracking

  // Delivery tracking fields
  firstVocabGenerated Boolean   @default(false)
  lastDailyWordDate   DateTime?
  dailyWordStreak     Int       @default(0)

  topics UserTopic[]
  quota  UserQuota?

  // Add relations
  deliveries     Delivery[]
  wordbank       Wordbank[]
  generationLogs GenerationLog[]
  createdTopics  Topic[] // Topics created by this user

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  id              String          @id @default(uuid())
  name            String          @unique
  description     String? // Optional description for the topic
  isCustom        Boolean         @default(false) // Whether this is a user-created topic
  createdByUserId String? // ID of user who created this topic (optional, for metadata only)
  usageCount      Int             @default(1) // How many users have selected this topic
  isActive        Boolean         @default(true) // Whether this topic is still available for selection
  maxTerms        Int             @default(10)
  canonicalSetId  String?
  canonicalSet    CanonicalSet?   @relation(fields: [canonicalSetId], references: [id])
  createdBy       User?           @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  userTopics      UserTopic[]
  terms           Term[]
  facts           Fact[]
  metricLogs      MetricLog[]
  generationLogs  GenerationLog[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model UserTopic {
  id      String  @id @default(uuid())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  topic   Topic   @relation(fields: [topicId], references: [id])
  topicId String
  weight  Int
  enabled Boolean @default(true)
}

model Term {
  id              String        @id @default(uuid())
  topicId         String
  topic           Topic         @relation(fields: [topicId], references: [id])
  canonicalSetId  String?
  canonicalSet    CanonicalSet? @relation(fields: [canonicalSetId], references: [id])
  term            String
  definition      String
  example         String
  source          String
  sourceUrl       String?
  verified        Boolean
  gptGenerated    Boolean
  confidenceScore Float
  category        String
  complexityLevel String
  createdAt       DateTime      @default(now())

  // Admin moderation fields
  moderationStatus String          @default("pending") // pending, approved, rejected
  moderationNote   String? // Optional reason for rejection or notes
  updatedByAdmin   Boolean         @default(false)
  updatedAt        DateTime        @updatedAt
  metricLogs       MetricLog[]
  generationLogs   GenerationLog[]

  // Add delivery relations
  deliveries Delivery[]
  wordbank   Wordbank[]

  @@unique([topicId, term])
}

model Fact {
  id           String   @id @default(uuid())
  topicId      String
  topic        Topic    @relation(fields: [topicId], references: [id])
  fact         String
  source       String
  sourceUrl    String?
  gptGenerated Boolean
  category     String
  createdAt    DateTime @default(now())

  // Admin moderation fields
  moderationStatus String      @default("pending") // pending, approved, rejected
  moderationNote   String? // Optional reason for rejection or notes
  updatedByAdmin   Boolean     @default(false)
  updatedAt        DateTime    @updatedAt
  metricLogs       MetricLog[]

  @@unique([topicId, fact])
}

model CanonicalSet {
  id     String  @id @default(uuid())
  terms  Term[]
  topics Topic[]
}

model UserQuota {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  currentUsage Int      @default(0)
  periodStart  DateTime @default(now())
  lastReset    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model MetricLog {
  id        String   @id @default(uuid())
  type      String // e.g., "openai", "fallback", "pipeline_failure", "moderation"
  topicId   String?
  termId    String?
  factId    String?
  message   String
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  // Optional relations for better querying
  topic Topic? @relation(fields: [topicId], references: [id])
  term  Term?  @relation(fields: [termId], references: [id])
  fact  Fact?  @relation(fields: [factId], references: [id])

  @@index([type])
  @@index([topicId])
  @@index([createdAt])
  @@index([type, createdAt])
}

// New delivery tracking models
model Delivery {
  id          String         @id @default(uuid())
  userId      String
  termId      String
  deliveredAt DateTime       @default(now())
  openedAt    DateTime?
  action      DeliveryAction @default(NONE)

  user User @relation(fields: [userId], references: [id])
  term Term @relation(fields: [termId], references: [id])

  @@index([userId])
  @@index([deliveredAt])
}

model Wordbank {
  id           String        @id @default(uuid())
  userId       String
  termId       String
  status       WordStatus    @default(LEARNING)
  bucket       Int           @default(1) // Spaced repetition bucket (1-5)
  lastReviewed DateTime?
  nextReview   DateTime?
  reviewCount  Int           @default(0)
  relevance    TermRelevance @default(RELATED)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  term Term @relation(fields: [termId], references: [id])

  @@unique([userId, termId])
  @@index([userId])
  @@index([nextReview])
}

model GenerationLog {
  id           String   @id @default(uuid())
  userId       String
  topicId      String?
  termId       String?
  promptType   String
  model        String
  costEstimate Float?
  success      Boolean  @default(true)
  errorMessage String?
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic? @relation(fields: [topicId], references: [id])
  term  Term?  @relation(fields: [termId], references: [id])

  @@index([userId])
  @@index([topicId])
  @@index([promptType])
  @@index([createdAt])
}

model AnonymizedLearningData {
  id                    String   @id @default(uuid())
  
  // Demographics (anonymized)
  userAgeBracket        String?  // "18-25", "26-35", etc.
  learningLevel         String?
  professionCategory    String?  // Generic category, not specific profession
  preferredDifficulty   String?
  
  // Learning behavior
  onboardingCompleted   Boolean
  dailyWordGoal         Int
  totalTermsLearned     Int
  averageLearningSpeed  Int?     // days per term
  streakAchieved        Int
  topicPreferences      String[] // Array of topic names
  
  // Outcomes
  termsMastered         Int
  termsStruggledWith    Int
  mostEffectiveTopics   String[]
  learningPattern       String   // "consistent", "burst", "gradual"
  
  // Timestamps
  daysActive            Int
  accountCreatedAt      DateTime
  anonymizedAt          DateTime @default(now())
  
  // Research metadata
  cohortGroup           String   // "Q1-2024", "mobile_users"
  learningStyle         String?  // Inferred from behavior
  successMetrics        Json?    // Additional metrics
  
  @@map("AnonymizedLearningData")
}

enum DeliveryAction {
  NONE
  FAVORITE
  LEARN_AGAIN
  MASTERED
}

enum WordStatus {
  LEARNING
  REVIEWING
  MASTERED
  ARCHIVED
}

enum TermRelevance {
  RELATED
  UNRELATED
}
