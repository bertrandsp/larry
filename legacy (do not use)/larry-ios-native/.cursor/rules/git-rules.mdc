---
description: >
  Git rules and best practices for the Larry iOS-first app project.
  These rules ensure clean commit history, safe collaboration, and scalable branching.
globs:
  - "**/*"
alwaysApply: true
---

## ✅ Git Workflow Rules

### 📦 Branching Strategy
- Use `main` for production-ready builds.
- Use `develop` for staging builds (optional).
- Feature branches follow this naming format:
  - `feature/onboarding-flow`
  - `bugfix/chat-crash-on-send`
  - `chore/update-readme`
- Always branch from `main` or `develop` unless hotfixing.

---

### 🔁 Commit Message Conventions
Use the format:  
`<type>: <short summary>`

**Allowed types:**
- `feat` – new feature
- `fix` – bug fix
- `chore` – non-functional task
- `refactor` – code restructuring
- `docs` – documentation only
- `style` – formatting/style changes (no logic)
- `test` – add/update tests

**Examples:**
- `feat: add spaced repetition buckets to delivery logic`
- `fix: crash on deep link callback`
- `chore: setup SwiftLint config`

---

### 🔨 Commit Best Practices
- Make each commit focused and meaningful.
- Write descriptive messages in present tense.
- Don’t commit generated files, `.DS_Store`, or build artifacts.
- Prefer atomic commits over giant catch-alls.
- Don’t push directly to `main` unless hotfixing.

---

### 🔁 Pull Request (PR) Guidelines
- PR title should match commit style (e.g., `feat: new topic weighting UI`)
- Add context in the PR description:
  - What does it do?
  - Why is it needed?
  - How to test it?
- Link related issues or Figma mocks if available.
- Tag reviewers early, and request feedback when needed.

---

### 🔍 Review & Merging
- Rebase before merge (`git pull --rebase origin main`)
- Resolve all conflicts locally before pushing.
- Squash commits if there are too many WIP commits.
- Only merge with green checks (CI, lint, tests).

---

### 🧹 Housekeeping
- Delete stale branches after merge.
- Tag releases with semantic versioning (e.g., `v1.0.0`)
- Regularly prune local branches: `git fetch -p`
- Use `.gitignore` to keep repo clean (e.g., `DerivedData`, `.xcworkspace`, `.env`)

---

## Optional Tools
- Use **Conventional Commits** linting
- Add a `commit-msg` Git hook for message validation
- Enable **Danger.js** for PR checks
- Use **GitHub Actions** or **Xcode Cloud** for CI/CD

---